const WebSocket = require('ws');
const fs = require('node:fs');
const aruba_telemetry_proto = require('../../aruba/aruba_iot_proto').aruba_telemetry;
const SensorModel = require('../models/sensorModel.js');
const { BufferReader } = require('protobufjs');

let wss;
let clientFilters = new Map();

exports.initWebsocket = (server) => {
    wss = new WebSocket.Server({server});    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á connection
    wss.on('connection',(ws) => {
        ws.on('message',(message) => {  
            
            const raw = message.toString(); // ‡πÅ‡∏õ‡∏•‡∏á Buffer ‡πÄ‡∏õ‡πá‡∏ô string

            try {
              const json = JSON.parse(raw); // ‡∏•‡∏≠‡∏á parse JSON ‡∏Å‡πà‡∏≠‡∏ô
          
              // ‚úÖ ‡∏ñ‡πâ‡∏≤ parse ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ "client" ‡∏™‡πà‡∏á‡∏°‡∏≤
              if (json.type === 'filter') {
                clientFilters.set(ws, {
                  building: json.building,
                  floor: json.floor
                });
                ws.send(`‚úÖ Filter updated: building=${JSON.stringify(json.building)}, floor=${json.floor}`);
              } else {
                console.log("üì© Client message:", json);
              }
          
              return; // ‡∏≠‡∏≠‡∏Å‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á decode ‡∏ï‡πà‡∏≠
            } catch (err) {
                // ‚ùå JSON.parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Üí ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô binary ‚Üí ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á decode ‡∏î‡πâ‡∏ß‡∏¢ Protobuf
                let telemetryReport = aruba_telemetry_proto.Telemetry.decode(message);
                let bleobj = JSON.stringify(telemetryReport);
                let sensor = JSON.parse(bleobj);
                if(sensor.reported){
                    // console.log(sensor.reporter.mac);
                  SensorModel.create(sensor)
                  this.broadcast(sensor)
                }
            }

            // ws.send(`Server received: ${message}`);
        });
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ client ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    ws.on('close', () => {
        console.log('Client has disconnected');
    });
    });
};

exports.broadcast = (sensor) => {
    if (!wss) return;    
    wss.clients.forEach((client) => {
      if (client.readyState === WebSocket.OPEN) {
        const filter = clientFilters.get(client) || {};   
        //‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Object ‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å function ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ    
        if(Object.keys(filter).length === 0) return; 
        // console.log("sensor ",sensor.reporter.mac);
        // console.log("filter ", filter);
        if(filter.building && typeof filter.building === 'object'){
            const isMatched = Object.values(filter?.building ?? {}).includes(sensor.reporter.mac);
            if(isMatched){ // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ client ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ            
                client.send(JSON.stringify(sensor)); // ‚úÖ
            }
        }        
      }
    });
  };